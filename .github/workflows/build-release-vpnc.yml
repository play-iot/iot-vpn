name: build-vpnclient

on:
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches: [ main, master ]
    paths:
      - '.github/workflows/build-release-vpnc.yml'
      - 'client/python/index.py'
      - 'client/python/src/client/**'
      - 'client/python/src/executor/**'
      - 'client/python/src/utils/**'
      - '!client/python/*.md'
      - 'docker/dockerfile/vpnclient.Dockerfile'
  push:
    branches: [ main, master ]
    tags:
      - 'vpnc/v*'
    paths:
      - '.github/workflows/build-release-vpnc.yml'
      - 'client/python/index.py'
      - 'client/python/src/client/**'
      - 'client/python/src/executor/**'
      - 'client/python/src/utils/**'
      - '!client/python/*.md'
      - 'docker/dockerfile/vpnclient.Dockerfile'

env:
  APP_IMAGE: qweio-vpnc
  PYTHON_VERSION: 3.7.10-slim-stretch
  PLATFORMS: linux/amd64,linux/arm/v7
  DOCKER_FILE: docker/dockerfile/vpnclient.Dockerfile
  DOCKER_FOLDER: ./client/python

jobs:

  context:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.context.outputs.branch }}
      shouldBuild: ${{ steps.context.outputs.decision_build }}
      shouldPublish: ${{ steps.context.outputs.decision_publish }}
      isRelease: ${{ steps.context.outputs.isTag }}
      afterRelease: ${{ steps.context.outputs.isAfterMergedReleasePR }}
      sha: ${{ steps.context.outputs.commitId }}
      version: ${{ steps.context.outputs.version }}

    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.OSS_GITHUB_TOKEN }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          git-push-gpgsign: false
          gpg-private-key: ${{ secrets.CI_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.CI_GPG_PASSPHARSE }}

      - name: Project context
        id: context
        uses: zero88/gh-project-context@v1
        with:
          dry: false
          mustSign: true
          tagPrefix: vpnc/v
          releaseBranchPrefix: release/vpnc/
          mergedReleaseMsgRegex: "^Merge pull request #[0-9]+ from .+/release/vpnc/.+$"
          patterns: |
            client/python/src/client/version.py::(CLI_VERSION\s?=\s?)(')([^']+)(')::2

  build:
    runs-on: ubuntu-latest
    needs: context
    if: needs.context.outputs.shouldBuild == 'true'
    services:
      registry:
        image: zero88/gh-registry:latest
        ports:
          - 5000:5000
        options: >-
          -v /home/runner:/var/lib/registry
          --name registry
    steps:
      - uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /home/runner/docker
          key: ${{ runner.os }}-${{ env.APP_IMAGE }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.APP_IMAGE }}-

      - name: Validate cache
        run: |
          docker buildx imagetools inspect localhost:5000/${{ env.APP_IMAGE }}:buildcache || echo "Not Found"

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ${{ env.APP_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=match,pattern=vpnc-v(.*),group=1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Build artifact by docker
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.DOCKER_FOLDER }}
          file: ${{ env.DOCKER_FILE }}
          platforms: ${{ env.PLATFORMS }}
          build-args: |
            BASE_IMAGE_VERSION=${{ env.PYTHON_VERSION }}
            APP_VERSION=${{ needs.context.outputs.version }}
            COMMIT_SHA=${{ needs.context.outputs.sha }}
          cache-from: type=registry,ref=localhost:5000/${{ env.APP_IMAGE }}:buildcache
          cache-to: type=registry,ref=localhost:5000/${{ env.APP_IMAGE }}:buildcache,mode=max
          tags: localhost:5000/${{ env.APP_IMAGE }}:${{ needs.context.outputs.sha }}
          pull: true
          push: true

      - name: Zip artifacts
        if: ${{ needs.context.outputs.shouldPublish == 'true' }}
        run: |
          image=localhost:5000/${{ env.APP_IMAGE }}:${{ needs.context.outputs.sha }}
          output=/usr/src/app/
          mkdir -p /tmp/zip /tmp/images
          IFS=',' read -ra ARR <<< "${{ env.PLATFORMS }}"
          for plat in "${ARR[@]}"; do
            p=$(echo "${plat//\//}")
            p=$(echo "${p//linux/}")
            perImage=$(docker buildx imagetools inspect $image | grep -B 2 $plat | grep Name: | awk '{print $2}')
            artifact=${{ env.APP_IMAGE }}.$p
            folder=/tmp/images/$artifact
            docker create --name $artifact $perImage && docker cp $artifact:$output $folder && docker rm $artifact
            cd $folder; zip -r /tmp/zip/$artifact.zip ./; cd -
          done

      - uses: actions/upload-artifact@v2
        if: ${{ needs.context.outputs.shouldPublish == 'true' }}
        with:
          name: ${{ env.APP_IMAGE }}
          path: /tmp/zip/
          retention-days: 2

      - name: Cleanup Docker build cache if any
        run: |
          docker buildx imagetools inspect localhost:5000/${{ env.APP_IMAGE }}:buildcache
          echo "======================================================"
          docker buildx prune --filter until=72h --keep-storage 3GB -f

      - name: Create Release
        if: ${{ needs.context.outputs.isRelease == 'true' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: vpnc/v${{ needs.context.outputs.version }}
          name: Release VPN Client v${{ needs.context.outputs.version }}
          draft: false
          prerelease: false
          files: |
            /tmp/zip/${{ env.APP_IMAGE }}.*.zip
